DECLARE
    V_CUST_ID VARCHAR2(50);
    V_CUST_NM VARCHAR2(50);
    CURSOR C_CUSTOMER IS
        SELECT CUST_ID, CUST_NM
          FROM CUSTOMER;
BEGIN
    OPEN C_CUSTOMER;
    LOOP
        FETCH C_CUSTOMER INTO V_CUST_ID, V_CUST_NM;
        IF V_CUST_ID = '2016000001' THEN
            DBMS_OUTPUT.PUT_LINE('IF안 문장 실행'||V_CUST_NM);
        ELSIF V_CUST_ID = '2016000002' THEN
            DBMS_OUTPUT.PUT_LINE('ELIF안 문장 실행'||V_CUST_NM);
        END IF;
        EXIT WHEN C_CUSTOMER%NOTFOUND;
    END LOOP;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE P_UPDATE_BASIC_PAY
( P_JOB_GRADE IN EMP_PAY.JOB_GRADE%TYPE
 ,P_JOB_YEAR IN EMP_PAY.JOB_YEAR%TYPE )
IS
BEGIN
    UPDATE EMP_PAY SET BASIC_PAY = BASIC_PAY*1.1
     WHERE JOB_GRADE = P_JOB_GRADE
       AND JOB_YEAR = P_JOB_YEAR;

    COMMIT;   
    
EXCEPTION 
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);    
        ROLLBACK;        
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

EXECUTE P_UPDATE_BASIC_PAY('01', '2019');

DECLARE
    TYPE BOOK_REC IS RECORD(
        BOOK_ID VARCHAR2(10),
        BOOK_NM VARCHAR2(50),
        PUBLISHER VARCHAR2(40),
        PRICE NUMBER(13)
    );
    V_BOOK_REC BOOK_REC;
BEGIN
    SELECT A.BOOK_ID, A.BOOK_NM, A.PUBLISHER, A.PRICE
      INTO V_BOOK_REC.BOOK_ID, V_BOOK_REC.BOOK_NM, V_BOOK_REC.PUBLISHER, V_BOOK_REC.PRICE
      FROM BOOK A
     WHERE A.BOOK_ID = '0000000001';
    
    DBMS_OUTPUT.PUT_LINE(V_BOOK_REC.BOOK_ID||V_BOOK_REC.BOOK_NM||V_BOOK_REC.PUBLISHER||V_BOOK_REC.PRICE);
     
EXCEPTION WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

DECLARE
    TYPE BOOK_ID_TBL IS TABLE OF BOOK.BOOK_ID%TYPE INDEX BY BINARY_INTEGER;
    V_BOOK_ID_TBL BOOK_ID_TBL;
    I BINARY_INTEGER := 0;
BEGIN
    FOR EACH_BOOK IN ( SELECT BOOK_ID
                         FROM BOOK ) LOOP
        I := I+1;
        V_BOOK_ID_TBL(I) := EACH_BOOK.BOOK_ID;
    END LOOP;
    
    FOR CNT IN 1.. I LOOP
        DBMS_OUTPUT.PUT_LINE(V_BOOK_ID_TBL(CNT));
    END LOOP;
END;

DECLARE
    TYPE BOOK_RECORD IS RECORD(
        BOOK_ID VARCHAR2(10),
        BOOK_NM VARCHAR2(40),
        PUBLISHER VARCHAR2(40),
        PRICE NUMBER(8,0)
    );
    TYPE BOOK_TABLE IS TABLE OF BOOK_RECORD INDEX BY BINARY_INTEGER;
    V_BOOK_TBL BOOK_TABLE;
    I BINARY_INTEGER := 0;
BEGIN
    FOR EACH_ROW IN ( SELECT BOOK_ID, BOOK_NM, PUBLISHER, PRICE
                        FROM BOOK ) LOOP
        I := I+1;
        V_BOOK_TBL(I).BOOK_ID := EACH_ROW.BOOK_ID;
        V_BOOK_TBL(I).BOOK_NM := EACH_ROW.BOOK_NM;
        V_BOOK_TBL(I).PUBLISHER := EACH_ROW.PUBLISHER;
        V_BOOK_TBL(I).PRICE := EACH_ROW.PRICE;
    END LOOP;
    
    FOR CNT IN 1 .. I LOOP
        DBMS_OUTPUT.PUT_LINE(V_BOOK_TBL(CNT).BOOK_ID||V_BOOK_TBL(CNT).BOOK_NM
                            ||V_BOOK_TBL(CNT).PUBLISHER||V_BOOK_TBL(CNT).PRICE);
    END LOOP;
END;

CREATE OR REPLACE FUNCTION F_GET_SUM
( X IN NUMBER,Y IN NUMBER ) RETURN NUMBER 
IS
BEGIN
    RETURN X+Y;
END; 

CREATE OR REPLACE FUNCTION F_GET_PAY
(P_EMP_NO IN EMP.EMP_NO%TYPE
,P_YEAR IN VARCHAR2)
RETURN NUMBER
IS
    V_RESULT NUMBER := 0;
BEGIN
    SELECT B.BASIC_PAY+C.BONUS_AMT PAY_AMT
      INTO V_RESULT
      FROM EMP A INNER JOIN EMP_PAY B ON A.JOB_GRADE = B.JOB_GRADE AND B.JOB_YEAR = P_YEAR AND A.EMP_NO = P_EMP_NO
           INNER JOIN ( SELECT A.EMP_NO, SUM(A.BONUS_AMT) BONUS_AMT
                          FROM EMP_BONUS A
                         WHERE A.EMP_NO = P_EMP_NO
                           AND A.BONUS_YYYY = P_YEAR
                        GROUP BY A.EMP_NO ) C ON A.EMP_NO = C.EMP_NO;
                        
    RETURN V_RESULT;                    
END;

